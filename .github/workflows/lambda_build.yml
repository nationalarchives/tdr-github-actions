name: TDR Build Lambda
on:
  workflow_call:
    inputs:
      repo-name:
        required: true
        type: string
      build-command:
        required: true
        type: string
      lambda-name:
        required: true
        type: string
      artifact-name:
        required: true
        type: string
      artifact-file-type:
        required: false
        type: string
        default: jar
      artifact-path:
        required: false
        type: string
        default: target/scala-2.13
      java-version:
        description: "Version of Java required to build project"
        required: false
        type: string
        default: '11'
    secrets:
      MANAGEMENT_ACCOUNT:
        required: true
      WORKFLOW_PAT:
        required: true
      WIZ_CLIENT_ID:
        required: false
      WIZ_CLIENT_SECRET:
        required: false
      WIZ_PROJECT_ID:
        required: false
    outputs:
      next-version:
        description: "The next version of the project"
        value: ${{ jobs.pre-deploy.outputs.next-version }}

permissions:
  id-token: write
  contents: write
jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    outputs:
      next-version: ${{ steps.next-tag.outputs.next-version }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: coursier/cache-action@142d2738bd29f0eb9d44610828acb3a19809feab
      - uses: sbt/setup-sbt@26ab4b0fa1c47fa62fc1f6e51823a658fb6c760c
      - uses: actions/setup-java@dd38875f930accc291b5816356a21f72056c0b70
        with:
            java-version: ${{ inputs.java-version }}
            distribution: 'temurin'
      - name: Configure AWS credentials from management account
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722
        with:
          role-to-assume: arn:aws:iam::${{ secrets.MANAGEMENT_ACCOUNT }}:role/TDRGithubActionsRoleMgmt
          aws-region: eu-west-2
          role-session-name: GitHubActionsRole
      - run: pip install requests
      - id: next-tag
        uses: nationalarchives/tdr-github-actions/.github/actions/get-next-version@main
        with:
          repo-name: ${{ inputs.repo-name }}
      - name: Download Wiz CLI
        if: contains(inputs.build-command, 'docker')
        run: |
          curl -o wizcli https://wizcli.app.wiz.io/wizcli
          chmod +x wizcli
      - name: Authenticate to Wiz API
        if: contains(inputs.build-command, 'docker')
        run: |
          ./wizcli auth --id ${{ secrets.WIZ_CLIENT_ID }} --secret ${{ secrets.WIZ_CLIENT_SECRET }}
      - name: Run wiz CLI IaC scan
        if: contains(inputs.build-command, 'docker')
        run: ./wizcli iac scan --path . --name ${{ inputs.repo-name }}-${{ github.run_number }} --project ${{ secrets.WIZ_PROJECT_ID }}
      - name: Run build command
        run: ${{ inputs.build-command }}
      - name: Wiz Docker Scan
        if: contains(inputs.build-command, 'docker')
        run: ./wizcli docker scan --image function --project ${{ secrets.WIZ_PROJECT_ID }}
      - name: Copy artifact to S3 and create release
        env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_PAT }}
        run: |
          aws s3 cp ${{ inputs.artifact-path }}/${{ inputs.artifact-name }}.${{ inputs.artifact-file-type }} s3://tdr-backend-code-mgmt/${{ inputs.lambda-name }}/${{ steps.next-tag.outputs.next-version }}/${{ inputs.artifact-name }}.${{ inputs.artifact-file-type }}
          git tag ${{ steps.next-tag.outputs.next-version }}
          git push origin ${{ steps.next-tag.outputs.next-version }}
          gh release create ${{ steps.next-tag.outputs.next-version }} ${{ inputs.artifact-path }}/${{ inputs.artifact-name }}.${{ inputs.artifact-file-type }}
